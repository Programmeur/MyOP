/* The following code was generated by JFlex 1.5.0-SNAPSHOT on 30.03.12 09:04 */

package org.projectforge.lucene; // Kai

/**
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*

WARNING: if you change ClassicTokenizerImpl.jflex and need to regenerate
      the tokenizer, only use the trunk version of JFlex 1.5 at the moment!

*/

import java.io.Reader;
import org.apache.lucene.analysis.tokenattributes.CharTermAttribute;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.5.0-SNAPSHOT
 * on 30.03.12 09:04 from the specification file
 * <tt>src/main/java/org/projectforge/lucene/ClassicTokenizerImpl.jflex</tt>
 */
class ClassicTokenizerImpl implements ClassicTokenizerInterface {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\0\1\16\1\0\1\0\1\15\22\0\1\0\5\0\1\7"+
    "\1\3\3\0\1\7\1\12\1\6\1\4\1\12\12\5\6\0\1\10"+
    "\32\13\4\0\1\11\1\0\32\13\57\0\1\13\12\0\1\13\4\0"+
    "\1\13\5\0\27\13\1\0\37\13\1\0\u0128\13\2\0\22\13\34\0"+
    "\136\13\2\0\11\13\2\0\7\13\16\0\2\13\16\0\5\13\11\0"+
    "\1\13\213\0\1\13\13\0\1\13\1\0\3\13\1\0\1\13\1\0"+
    "\24\13\1\0\54\13\1\0\10\13\2\0\32\13\14\0\202\13\12\0"+
    "\71\13\2\0\2\13\2\0\2\13\3\0\46\13\2\0\2\13\67\0"+
    "\46\13\2\0\1\13\7\0\47\13\110\0\33\13\5\0\3\13\56\0"+
    "\32\13\5\0\13\13\25\0\12\2\7\0\143\13\1\0\1\13\17\0"+
    "\2\13\11\0\12\2\3\13\23\0\1\13\1\0\33\13\123\0\46\13"+
    "\u015f\0\65\13\3\0\1\13\22\0\1\13\7\0\12\13\4\0\12\2"+
    "\25\0\10\13\2\0\2\13\2\0\26\13\1\0\7\13\1\0\1\13"+
    "\3\0\4\13\42\0\2\13\1\0\3\13\4\0\12\2\2\13\23\0"+
    "\6\13\4\0\2\13\2\0\26\13\1\0\7\13\1\0\2\13\1\0"+
    "\2\13\1\0\2\13\37\0\4\13\1\0\1\13\7\0\12\2\2\0"+
    "\3\13\20\0\7\13\1\0\1\13\1\0\3\13\1\0\26\13\1\0"+
    "\7\13\1\0\2\13\1\0\5\13\3\0\1\13\22\0\1\13\17\0"+
    "\1\13\5\0\12\2\25\0\10\13\2\0\2\13\2\0\26\13\1\0"+
    "\7\13\1\0\2\13\2\0\4\13\3\0\1\13\36\0\2\13\1\0"+
    "\3\13\4\0\12\2\25\0\6\13\3\0\3\13\1\0\4\13\3\0"+
    "\2\13\1\0\1\13\1\0\2\13\3\0\2\13\3\0\3\13\3\0"+
    "\10\13\1\0\3\13\55\0\11\2\25\0\10\13\1\0\3\13\1\0"+
    "\27\13\1\0\12\13\1\0\5\13\46\0\2\13\4\0\12\2\25\0"+
    "\10\13\1\0\3\13\1\0\27\13\1\0\12\13\1\0\5\13\44\0"+
    "\1\13\1\0\2\13\4\0\12\2\25\0\10\13\1\0\3\13\1\0"+
    "\27\13\1\0\20\13\46\0\2\13\4\0\12\2\25\0\22\13\3\0"+
    "\30\13\1\0\11\13\1\0\1\13\2\0\7\13\71\0\1\1\60\13"+
    "\1\1\2\13\14\1\7\13\11\1\12\2\47\0\2\13\1\0\1\13"+
    "\2\0\2\13\1\0\1\13\2\0\1\13\6\0\4\13\1\0\7\13"+
    "\1\0\3\13\1\0\1\13\1\0\1\13\2\0\2\13\1\0\4\13"+
    "\1\0\2\13\11\0\1\13\2\0\5\13\1\0\1\13\11\0\12\2"+
    "\2\0\2\13\42\0\1\13\37\0\12\2\26\0\10\13\1\0\42\13"+
    "\35\0\4\13\164\0\42\13\1\0\5\13\1\0\2\13\25\0\12\2"+
    "\6\0\6\13\112\0\46\13\12\0\47\13\11\0\132\13\5\0\104\13"+
    "\5\0\122\13\6\0\7\13\1\0\77\13\1\0\1\13\1\0\4\13"+
    "\2\0\7\13\1\0\1\13\1\0\4\13\2\0\47\13\1\0\1\13"+
    "\1\0\4\13\2\0\37\13\1\0\1\13\1\0\4\13\2\0\7\13"+
    "\1\0\1\13\1\0\4\13\2\0\7\13\1\0\7\13\1\0\27\13"+
    "\1\0\37\13\1\0\1\13\1\0\4\13\2\0\7\13\1\0\47\13"+
    "\1\0\23\13\16\0\11\2\56\0\125\13\14\0\u026c\13\2\0\10\13"+
    "\12\0\32\13\5\0\113\13\225\0\64\13\54\0\12\2\46\0\12\2"+
    "\6\0\130\13\10\0\51\13\u0557\0\234\13\4\0\132\13\6\0\26\13"+
    "\2\0\6\13\2\0\46\13\2\0\6\13\2\0\10\13\1\0\1\13"+
    "\1\0\1\13\1\0\1\13\1\0\37\13\2\0\65\13\1\0\7\13"+
    "\1\0\1\13\3\0\3\13\1\0\7\13\3\0\4\13\2\0\6\13"+
    "\4\0\15\13\5\0\3\13\1\0\7\13\202\0\1\13\202\0\1\13"+
    "\4\0\1\13\2\0\12\13\1\0\1\13\3\0\5\13\6\0\1\13"+
    "\1\0\1\13\1\0\1\13\1\0\4\13\1\0\3\13\1\0\7\13"+
    "\u0ecb\0\2\13\52\0\5\13\12\0\1\14\124\14\10\14\2\14\2\14"+
    "\132\14\1\14\3\14\6\14\50\14\3\14\1\0\136\13\21\0\30\13"+
    "\70\0\20\14\u0100\0\200\14\200\0\u19b6\14\12\14\100\0\u51a6\14\132\14"+
    "\u048d\13\u0773\0\u2ba4\13\u215c\0\u012e\14\322\14\7\13\14\0\5\13\5\0"+
    "\1\13\1\0\12\13\1\0\15\13\1\0\5\13\1\0\1\13\1\0"+
    "\2\13\1\0\2\13\1\0\154\13\41\0\u016b\13\22\0\100\13\2\0"+
    "\66\13\50\0\14\13\164\0\3\13\1\0\1\13\1\0\207\13\23\0"+
    "\12\2\7\0\32\13\6\0\32\13\12\0\1\14\72\14\37\13\3\0"+
    "\6\13\2\0\6\13\2\0\6\13\2\0\3\13\43\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\4\2\1\3\1\1\7\0\1\2\4\0"+
    "\1\2\3\4\1\0\1\5\2\0\1\5\3\4\6\5"+
    "\1\2\1\6\1\4\2\7\1\10\1\0\1\10\3\0"+
    "\2\10\1\2\1\11\1\12\1\0\1\4\2\5\1\0"+
    "\1\5\1\13";

  private static int [] zzUnpackAction() {
    int [] result = new int[61];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\17\0\36\0\55\0\74\0\113\0\17\0\132"+
    "\0\151\0\170\0\207\0\226\0\245\0\264\0\303\0\322"+
    "\0\341\0\360\0\377\0\u010e\0\u011d\0\u012c\0\u013b\0\u014a"+
    "\0\u0159\0\u0168\0\u0177\0\u0186\0\u0195\0\u01a4\0\u01b3\0\u01c2"+
    "\0\u01d1\0\u01e0\0\u01ef\0\u01fe\0\u020d\0\u021c\0\u022b\0\u023a"+
    "\0\u0249\0\377\0\u0258\0\u0267\0\u0276\0\u0285\0\u0294\0\u02a3"+
    "\0\u02b2\0\151\0\245\0\u02c1\0\u02d0\0\u02df\0\u02ee\0\u02fd"+
    "\0\u030c\0\u031b\0\u032a\0\u0339\0\u01e0";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[61];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\2\2\1\5\5\2\1\6\1\7"+
    "\1\10\1\2\20\0\2\3\1\0\1\11\1\3\1\12"+
    "\1\0\1\13\1\12\1\14\1\3\4\0\1\3\1\4"+
    "\1\0\1\15\1\4\1\16\1\0\1\13\1\16\1\17"+
    "\1\4\4\0\1\3\1\4\1\0\1\15\1\20\1\16"+
    "\1\0\1\13\1\16\1\17\1\4\4\0\1\3\1\4"+
    "\1\21\1\22\1\4\1\12\1\23\1\24\1\12\1\14"+
    "\1\25\21\0\1\2\1\0\1\26\1\27\2\0\1\27"+
    "\5\0\1\30\4\0\1\31\1\32\2\0\1\32\5\0"+
    "\1\33\4\0\2\34\2\0\1\34\5\0\1\34\5\0"+
    "\1\35\2\0\1\35\5\0\1\14\4\0\1\36\1\37"+
    "\2\0\1\37\5\0\1\40\4\0\1\41\1\42\2\0"+
    "\1\42\5\0\1\43\4\0\1\44\1\45\2\0\1\45"+
    "\5\0\1\46\4\0\1\3\1\4\1\0\1\15\1\47"+
    "\1\16\1\0\1\13\1\16\1\17\1\4\16\0\1\50"+
    "\4\0\1\26\1\27\2\0\1\27\5\0\1\51\16\0"+
    "\1\52\4\0\2\34\2\0\1\34\5\0\1\53\4\0"+
    "\1\3\1\4\1\21\1\11\1\4\1\12\1\23\1\24"+
    "\1\12\1\14\1\25\4\0\2\26\1\0\1\54\1\26"+
    "\1\55\1\0\1\13\1\55\1\0\1\26\4\0\1\26"+
    "\1\27\1\0\1\56\1\27\1\57\1\0\1\13\1\57"+
    "\1\60\1\27\4\0\1\26\1\27\1\0\1\54\1\27"+
    "\1\55\1\0\1\13\1\55\1\0\1\30\4\0\2\31"+
    "\1\0\1\55\1\31\1\55\1\0\1\13\1\55\1\0"+
    "\1\31\4\0\1\31\1\32\1\0\1\57\1\32\1\57"+
    "\1\0\1\13\1\57\1\60\1\32\4\0\1\31\1\32"+
    "\1\0\1\55\1\32\1\55\1\0\1\13\1\55\1\0"+
    "\1\33\4\0\2\34\1\0\1\61\1\34\1\61\4\0"+
    "\1\34\5\0\1\35\1\0\1\60\1\35\1\60\2\0"+
    "\2\60\1\35\4\0\2\36\1\0\1\62\1\36\1\12"+
    "\1\0\1\13\1\12\1\14\1\36\4\0\1\36\1\37"+
    "\1\0\1\63\1\37\1\16\1\0\1\13\1\16\1\17"+
    "\1\37\4\0\1\36\1\37\1\0\1\62\1\37\1\12"+
    "\1\0\1\13\1\12\1\14\1\40\4\0\2\41\1\0"+
    "\1\12\1\41\1\12\1\0\1\13\1\12\1\14\1\41"+
    "\4\0\1\41\1\42\1\0\1\16\1\42\1\16\1\0"+
    "\1\13\1\16\1\17\1\42\4\0\1\41\1\42\1\0"+
    "\1\12\1\42\1\12\1\0\1\13\1\12\1\14\1\43"+
    "\4\0\2\44\1\0\1\14\1\44\1\14\2\0\2\14"+
    "\1\44\4\0\1\44\1\45\1\0\1\17\1\45\1\17"+
    "\2\0\2\17\1\45\4\0\1\44\1\45\1\0\1\14"+
    "\1\45\1\14\2\0\2\14\1\46\4\0\1\3\1\4"+
    "\1\0\1\15\1\64\1\16\1\0\1\13\1\16\1\17"+
    "\1\4\6\0\1\21\7\0\1\50\4\0\1\26\1\27"+
    "\1\0\1\65\1\27\1\55\1\0\1\13\1\55\1\0"+
    "\1\30\4\0\2\34\1\0\1\61\1\34\1\61\4\0"+
    "\1\53\4\0\2\26\2\0\1\26\5\0\1\26\4\0"+
    "\2\31\2\0\1\31\5\0\1\31\4\0\2\36\2\0"+
    "\1\36\5\0\1\36\4\0\2\41\2\0\1\41\5\0"+
    "\1\41\4\0\2\44\2\0\1\44\5\0\1\44\4\0"+
    "\2\66\2\0\1\66\5\0\1\66\4\0\1\3\1\4"+
    "\1\0\1\15\1\4\1\67\1\0\1\13\1\16\1\17"+
    "\1\4\4\0\2\26\2\0\1\26\5\0\1\70\4\0"+
    "\2\66\1\0\1\61\1\66\1\61\4\0\1\66\4\0"+
    "\1\41\1\42\2\0\1\71\5\0\1\43\4\0\2\26"+
    "\1\0\1\65\1\26\1\55\1\0\1\13\1\55\1\0"+
    "\1\26\4\0\1\41\1\42\1\0\1\16\1\72\1\16"+
    "\1\0\1\13\1\16\1\17\1\42\4\0\1\41\1\42"+
    "\1\0\1\16\1\42\1\73\1\0\1\13\1\16\1\17"+
    "\1\42\4\0\1\41\1\42\2\0\1\74\5\0\1\43"+
    "\4\0\1\41\1\42\1\0\1\16\1\75\1\16\1\0"+
    "\1\13\1\16\1\17\1\42\3\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[840];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\4\1\1\11\1\1\7\0\1\1\4\0"+
    "\4\1\1\0\1\1\2\0\20\1\1\0\1\1\3\0"+
    "\5\1\1\0\3\1\1\0\2\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[61];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */

public static final int ALPHANUM          = ClassicTokenizer.ALPHANUM;
public static final int APOSTROPHE        = ClassicTokenizer.APOSTROPHE;
public static final int ACRONYM           = ClassicTokenizer.ACRONYM;
public static final int COMPANY           = ClassicTokenizer.COMPANY;
public static final int ISO_DATE          = ClassicTokenizer.ISO_DATE; // Kai
public static final int EMAIL             = ClassicTokenizer.EMAIL;
public static final int HOST              = ClassicTokenizer.HOST;
public static final int NUM               = ClassicTokenizer.NUM;
public static final int CJ                = ClassicTokenizer.CJ;
/**
 * @deprecated this solves a bug where HOSTs that end with '.' are identified
 *             as ACRONYMs.
 */
@Deprecated
public static final int ACRONYM_DEP       = ClassicTokenizer.ACRONYM_DEP;

public static final String [] TOKEN_TYPES = ClassicTokenizer.TOKEN_TYPES;

public final int yychar()
{
    return yychar;
}

/**
 * Fills CharTermAttribute with the current token text.
 */
public final void getText(CharTermAttribute t) {
  t.copyBuffer(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
}



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  ClassicTokenizerImpl(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  ClassicTokenizerImpl(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1156) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int getNextToken() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 10: 
          { return EMAIL;
          }
        case 12: break;
        case 2: 
          { return ALPHANUM;
          }
        case 13: break;
        case 4: 
          { return HOST;
          }
        case 14: break;
        case 1: 
          { /* ignore */
          }
        case 15: break;
        case 8: 
          { return ACRONYM_DEP;
          }
        case 16: break;
        case 5: 
          { return NUM;
          }
        case 17: break;
        case 11: 
          { return ISO_DATE;
          }
        case 18: break;
        case 9: 
          { return ACRONYM;
          }
        case 19: break;
        case 7: 
          { return COMPANY;
          }
        case 20: break;
        case 6: 
          { return APOSTROPHE;
          }
        case 21: break;
        case 3: 
          { return CJ;
          }
        case 22: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return YYEOF;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
